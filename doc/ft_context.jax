*ft_context.txt*	For Vim バージョン 9.0.  Last change: 2022 Sep 27

これは ConTeXt ファイルタイププラグインのドキュメントです。

NOTE: このプラグインは +vim9script が必要です。

==============================================================================
☆内容						*context.vim* *ft-context*

1. 前書き				|ft-context-intro|
2. コマンド				|ft-context-commands|
3. 設定					|ft-context-settings|
4. マッピング				|ft-context-mappings|

==============================================================================
							*ft-context-intro*
前書き ~

ConTeXtは、LaTeXと同じで、Tex上に構築されたマクロベースの組版システムです:
>
	https://wiki.contextgarden.net
	https://wiki.contextgarden.net/Vim
<
ConTeXt プラグインは構文ハイライト、組版したConTeXt文章の補完とサポートを提供
します。文章を組版するのに推奨する方法は |:ConTeXt| を使うことです。これは
`$PATH` 上で見付けた `mtxrun` スクリプトを動作させます。

コマンドとその環境でよりきめ細かな制御をするには、`context.Typeset()` を直接使
うことができます(あるいは旧来の Vim script からは `context#Typeset()`)。例え
ば、もし `~/context` 内にインストールされているバージョンの ConTeXt なら、以下
のものと同じように利用できる関数を定義できます:
>
	import autoload 'context.vim'

	def MyConTeXt()
	    const env = {'PATH':
	      printf("%s/context/tex/texmf-<os>-<arch>/bin:%s", $HOME, $PATH)}
	    context.Typeset("%", env)
	enddef

このコードを `~/.vim/after/ftplugin/context.vim` に置きます。マッピングでその
定義したカスタムコマンドを実行できます:
>
	nnoremap <silent><buffer><leader>t <scriptcmd>MyConTeXt()<cr>
<
`context.Typeset()` は三番目のオプショナルな引数として指定したカスタムの組版コ
マンドを受け付けます。それは関数でパスを取りリストとしてコマンドを返す必要があ
ります。例えば:
>
	def ConTeXtCustomCommand(path: string): list<string>
	  return ['mtxrun', '--script', 'context', '--nonstopmode', path]
	enddef

	context.ConTeXtTypeset("%", v:none, ConTeXtCustomCommand)
<
大きなプロジェクトでは時折ルートの文章とさまざまな章のファイルとして構造化され
ています。章ファイルの編集時、ルートのファイルに切り替えて実行するよりも、その
上で直接 |:ConTeXt| を実行するのが便利です。"マジック行" を各章のファイルの開
始に追加することもでき、ルートのファイルへの相対パスを指定できます。例えば:
>
	% !TEX root = ../MyRoot.tex
<
Vim はマジック行がカレントバッファの最初の10行にあるかを検索します: もし見付け
れば、カレントバッファ単体ではなくその行で指定されるドキュメントとして組版され
ます。ルートの文章はVimで開いている必要はありません。

補完と構文ハイライトを拡張する、ConTeXt で使う補助ファイル群を生成して設定に追
加できます。あなたの設定が `~/.vim` にあるのなら、これらのコマンドが使えます:
>
	mkdir -p ~/.vim/syntax/shared
	cd ~/.vim/syntax/shared
	mtxrun --script interface --vim
<
最後のコマンドは以下の構文ファイルを生成します:

- `context-data-context.vim`;
- `context-data-interfaces.vim`;
- `context-data-metafun.vim`;
- `context-data-tex.vim`.

これらの構文ファイルを更新するのに同じコマンドを使うことができます。

							*ft-context-commands*
コマンド ~
					*:ConTeXt*
カレントバッファの文書を組版するバックグラウンド |job| を開始します。このコマ
ンドは、別バッファにある文書の組版を希望する場合、オプションとしてバッファ名を
受け付けます。

					*:ConTeXtLog*
カレントバッファの文章ソースとして一致するログファイルを編集する。

					*:ConTeXtJobsStatus*
現在バックグラウンドで動作しているジョブ数を表示する。

					*:ConTeXtStopJobs*
現在バックグラウンドで動作している ConTeXt ジョブをすべて停止する。

							*ft-context-settings*
設定 ~
					*'b:context_ignore_makefile'*
					*'g:context_ignore_makefile'*
`:make` で(同期的な)文章の組版が行えます。Makefile が存在しこのオプションが設
定されていないなら、通常の `make` が使用されます。このオプションが設定されてい
るなら、Makefile が存在しても、`mtxrun` がかわりに実行されます。
>
	g:context_ignore_makefile = 0
<
NOTE: `:make` 実行前に、ファイルの組版をするディレクトリとしてバッファの作業
ディレクトリを設定します。

					*'g:context_extra_options'*
`mtxrun` に渡す追加のオプションのリスト。
>
	g:context_extra_options = []
<
					*'b:context_include'*
					*'g:context_include'*
\startGROUP と \stopGROUP の間で有効になる構文ハイライトのファイルタイプ/GROUP
のペアの辞書。デフォルトでは`\startXML` と `\stopXML` の間がXMLでハイライトさ
れる。
>
	g:context_include = {'xml': 'XML'}

NOTE: Lua と MetaPost は個別のブロック内では常にハイライトされる。

					*'g:no_context_maps'*
設定時、マッピングは定義されない。
>
	g:no_context_maps = 0
<
							*ft-context-mappings*
マッピング ~

tp			"reflow TeX paragraph"、TeX での段落を整形します。

i$			"inside inline math block"、インラインの数式ブロック内
			部を選択します。

a$			"around inline math block"、インラインの数式ブロックを
			選択します。

]]			[count] セクションの開始に進む。

[[			[count] セクションの開始に戻る。

][			[count] セクションの終了に進む。

[]			[count] セクションの終了に戻る。

]}			[count] ブロックの終了 (\stop..., \setup...,
			\define...) に進む。

[{			[count] ブロックの開始 (\start..., \setup...,
			\define...) に戻る。

 vim:tw=78:sw=4:ts=8:noet:ft=help:norl:
